import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Separator } from "@/components/ui/separator";
import { Progress } from "@/components/ui/progress";
import { 
  Rocket, 
  Zap, 
  Shield, 
  Settings, 
  Play, 
  Square, 
  Info,
  AlertTriangle,
  CheckCircle,
  Clock
} from "lucide-react";
import DeployStatusModal from "./DeployStatusModal";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface DeployOption {
  id: string;
  title: string;
  description: string;
  icon: any;
  color: string;
  endpoint: string;
  tooltip: string;
}

export default function EnhancedDeployManager() {
  const [activeDeployment, setActiveDeployment] = useState<string | null>(null);
  const [deployStatus, setDeployStatus] = useState<'idle' | 'building' | 'success' | 'error'>('idle');
  const [deployProgress, setDeployProgress] = useState(0);
  const [deployLogs, setDeployLogs] = useState<string[]>([]);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const { toast } = useToast();

  const deployOptions: DeployOption[] = [
    {
      id: 'quick',
      title: '–ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π',
      description: '–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: Zap,
      color: 'bg-blue-600',
      endpoint: '/api/vercel/api-deploy',
      tooltip: '–ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π. –í—Ä–µ–º—è: ~2-3 –º–∏–Ω—É—Ç—ã.'
    },
    {
      id: 'production',
      title: '–ü—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ–π',
      description: '–ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–∞',
      icon: Rocket,
      color: 'bg-green-600',
      endpoint: '/api/vercel/deploy-production',
      tooltip: '–ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤. –í—Ä–µ–º—è: ~5-7 –º–∏–Ω—É—Ç.'
    },
    {
      id: 'enhanced',
      title: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π',
      description: '–° –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫ esbuild',
      icon: Shield,
      color: 'bg-purple-600',
      endpoint: '/api/vercel/deploy-enhanced',
      tooltip: '–î–µ–ø–ª–æ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ esbuild –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é. –í—Ä–µ–º—è: ~4-6 –º–∏–Ω—É—Ç.'
    },
    {
      id: 'modular',
      title: '–ú–æ–¥—É–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π',
      description: '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      icon: Settings,
      color: 'bg-orange-600',
      endpoint: '/api/vercel/deploy-modular',
      tooltip: '–†–∞–∑–±–∏–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –í—Ä–µ–º—è: ~6-8 –º–∏–Ω—É—Ç.'
    }
  ];

  const handleDeploy = async (option: DeployOption) => {
    if (activeDeployment) {
      toast({
        title: "–î–µ–ø–ª–æ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
        description: "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–ø–ª–æ—è",
        variant: "destructive"
      });
      return;
    }

    setActiveDeployment(option.id);
    setDeployStatus('building');
    setDeployProgress(0);
    setDeployLogs([`–ó–∞–ø—É—Å–∫ ${option.title}...`]);
    setShowStatusModal(true);

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressInterval = setInterval(() => {
        setDeployProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return prev;
          }
          return prev + Math.random() * 10;
        });
      }, 1000);

      const response = await apiRequest("POST", option.endpoint, {});
      
      clearInterval(progressInterval);
      setDeployProgress(100);

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setDeployStatus('success');
          setDeployLogs(prev => [...prev, '–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!']);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π AI –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
          setTimeout(() => {
            analyzeDeployment();
          }, 2000);
        } else {
          setDeployStatus('error');
          setDeployLogs(prev => [...prev, `–û—à–∏–±–∫–∞: ${result.error}`]);
        }
      } else {
        setDeployStatus('error');
        setDeployLogs(prev => [...prev, '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ']);
      }
    } catch (error: any) {
      setDeployStatus('error');
      setDeployLogs(prev => [...prev, `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`]);
    } finally {
      setActiveDeployment(null);
    }
  };

  const analyzeDeployment = async () => {
    try {
      const response = await apiRequest("POST", "/api/ai/analyze-deployment", {
        logs: deployLogs
      });

      if (response.ok) {
        const analysis = await response.json();
        if (analysis.success && analysis.analysis.errors_detected > 0) {
          setDeployLogs(prev => [
            ...prev,
            'ü§ñ AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫–∏:',
            ...analysis.analysis.recommendations
          ]);
        }
      }
    } catch (error) {
      console.log('AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  };

  const handleStopDeployment = () => {
    if (activeDeployment) {
      setActiveDeployment(null);
      setDeployStatus('error');
      setDeployLogs(prev => [...prev, '–î–µ–ø–ª–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º']);
      toast({
        title: "–î–µ–ø–ª–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        description: "–ü—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω",
        variant: "destructive"
      });
    }
  };

  const getStatusIcon = () => {
    switch (deployStatus) {
      case 'building':
        return <Clock className="w-4 h-4 text-blue-400 animate-spin" />;
      case 'success':
        return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'error':
        return <AlertTriangle className="w-4 h-4 text-red-400" />;
      default:
        return <Info className="w-4 h-4 text-gray-400" />;
    }
  };

  return (
    <TooltipProvider>
      <Card className="w-full bg-gray-900 border-gray-700">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-white flex items-center gap-2">
                <Rocket className="w-5 h-5" />
                Deploy Manager
              </CardTitle>
              <CardDescription className="text-gray-400">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–ª–æ–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              {getStatusIcon()}
              <Badge variant={deployStatus === 'success' ? 'default' : deployStatus === 'error' ? 'destructive' : 'secondary'}>
                {deployStatus === 'idle' ? '–ì–æ—Ç–æ–≤' : 
                 deployStatus === 'building' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' :
                 deployStatus === 'success' ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}
              </Badge>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {deployStatus === 'building' && (
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-300">–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ–ø–ª–æ—è</span>
                <span className="text-gray-400">{Math.round(deployProgress)}%</span>
              </div>
              <Progress value={deployProgress} className="w-full" />
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {deployOptions.map((option) => {
              const Icon = option.icon;
              const isActive = activeDeployment === option.id;
              
              return (
                <Tooltip key={option.id}>
                  <TooltipTrigger asChild>
                    <Button
                      onClick={() => handleDeploy(option)}
                      disabled={!!activeDeployment && !isActive}
                      className={`
                        h-auto p-4 flex flex-col items-start gap-2 text-left
                        ${isActive ? 'bg-blue-700 border-blue-500' : 'bg-gray-800 hover:bg-gray-700'}
                        border border-gray-600 transition-all duration-200
                      `}
                    >
                      <div className="flex items-center gap-2 w-full">
                        <div className={`p-2 rounded ${option.color}`}>
                          <Icon className="w-4 h-4 text-white" />
                        </div>
                        <div className="flex-1">
                          <div className="font-medium text-white text-sm">
                            {option.title}
                          </div>
                          <div className="text-xs text-gray-400">
                            {option.description}
                          </div>
                        </div>
                        {isActive && <Play className="w-4 h-4 text-blue-400" />}
                      </div>
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="top" className="max-w-xs">
                    <p className="text-sm">{option.tooltip}</p>
                  </TooltipContent>
                </Tooltip>
              );
            })}
          </div>

          <Separator className="bg-gray-700" />

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Button
                onClick={() => setShowStatusModal(true)}
                variant="outline"
                size="sm"
                className="border-gray-600 text-gray-300 hover:bg-gray-800"
              >
                <Info className="w-3 h-3 mr-1" />
                –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
              </Button>
              
              {activeDeployment && (
                <Button
                  onClick={handleStopDeployment}
                  variant="destructive"
                  size="sm"
                  className="text-xs"
                >
                  <Square className="w-3 h-3 mr-1" />
                  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </Button>
              )}
            </div>
            
            <div className="text-xs text-gray-500">
              AI-–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω
            </div>
          </div>
        </CardContent>
      </Card>

      <DeployStatusModal
        isOpen={showStatusModal}
        onClose={() => setShowStatusModal(false)}
        deploymentType={activeDeployment || 'unknown'}
        status={deployStatus}
        progress={deployProgress}
        logs={deployLogs}
        onCancel={activeDeployment ? handleStopDeployment : undefined}
      />
    </TooltipProvider>
  );
}