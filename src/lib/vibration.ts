// Vibration API –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Android/iOS)
export interface VibrationPattern {
  pattern: number[];
  name: string;
  description: string;
}

export const vibrationPatterns: Record<string, VibrationPattern> = {
  click: {
    pattern: [10],
    name: 'Click',
    description: '–õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ'
  },
  success: {
    pattern: [50, 50, 100],
    name: 'Success',
    description: '–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ'
  },
  achievement: {
    pattern: [100, 50, 100, 50, 200],
    name: 'Achievement',
    description: '–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
  },
  levelUp: {
    pattern: [200, 100, 200],
    name: 'Level Up',
    description: '–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è'
  },
  error: {
    pattern: [300],
    name: 'Error',
    description: '–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ'
  },
  notification: {
    pattern: [50, 100, 50],
    name: 'Notification',
    description: '–í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
  }
};

class VibrationService {
  private isEnabled: boolean = true;
  private isSupported: boolean = false;

  constructor() {
    this.checkSupport();
    this.loadSettings();
  }

  private checkSupport(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Vibration API
    this.isSupported = 'vibrate' in navigator;
    
    if (!this.isSupported) {
      console.log('üì≥ Vibration API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º');
    } else {
      console.log('üì≥ Vibration API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
  }

  private loadSettings(): void {
    const saved = localStorage.getItem('wealth-tycoon-vibration');
    if (saved !== null) {
      this.isEnabled = JSON.parse(saved);
    }
  }

  public setEnabled(enabled: boolean): void {
    this.isEnabled = enabled;
    localStorage.setItem('wealth-tycoon-vibration', JSON.stringify(enabled));
    console.log(`üì≥ –í–∏–±—Ä–∞—Ü–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
  }

  public isVibrationEnabled(): boolean {
    return this.isEnabled;
  }

  public isVibrationSupported(): boolean {
    return this.isSupported;
  }

  public vibrate(patternName: keyof typeof vibrationPatterns): void {
    if (!this.isEnabled || !this.isSupported) {
      return;
    }

    const pattern = vibrationPatterns[patternName];
    if (!pattern) {
      console.warn(`üì≥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤–∏–±—Ä–∞—Ü–∏–∏: ${patternName}`);
      return;
    }

    try {
      navigator.vibrate(pattern.pattern);
      console.log(`üì≥ –í–∏–±—Ä–∞—Ü–∏—è: ${pattern.name}`);
    } catch (error) {
      console.error('üì≥ –û—à–∏–±–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏:', error);
    }
  }

  public vibrateCustom(pattern: number[]): void {
    if (!this.isEnabled || !this.isSupported) {
      return;
    }

    try {
      navigator.vibrate(pattern);
      console.log(`üì≥ –ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è: [${pattern.join(', ')}]`);
    } catch (error) {
      console.error('üì≥ –û—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –≤–∏–±—Ä–∞—Ü–∏–∏:', error);
    }
  }

  public stopVibration(): void {
    if (!this.isSupported) {
      return;
    }

    try {
      navigator.vibrate(0);
      console.log('üì≥ –í–∏–±—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('üì≥ –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏:', error);
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
  public vibrateClick(): void {
    this.vibrate('click');
  }

  public vibrateSuccess(): void {
    this.vibrate('success');
  }

  public vibrateAchievement(): void {
    this.vibrate('achievement');
  }

  public vibrateLevelUp(): void {
    this.vibrate('levelUp');
  }

  public vibrateError(): void {
    this.vibrate('error');
  }

  public vibrateNotification(): void {
    this.vibrate('notification');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏
  public testVibration(): void {
    if (!this.isSupported) {
      console.warn('üì≥ –í–∏–±—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
      return;
    }

    console.log('üì≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏...');
    this.vibrateCustom([100, 50, 100, 50, 100]);
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const vibrationService = new VibrationService();

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const vibrate = (pattern: keyof typeof vibrationPatterns) => {
  vibrationService.vibrate(pattern);
};

export const vibrateCustom = (pattern: number[]) => {
  vibrationService.vibrateCustom(pattern);
};

export const setVibrationEnabled = (enabled: boolean) => {
  vibrationService.setEnabled(enabled);
};

export const isVibrationEnabled = () => {
  return vibrationService.isVibrationEnabled();
};

export const isVibrationSupported = () => {
  return vibrationService.isVibrationSupported();
};