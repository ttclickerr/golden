import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth, GoogleAuthProvider, signInWithRedirect, signOut, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, OAuthProvider } from "firebase/auth";
import { getFirestore, doc, setDoc, getDoc, collection, addDoc } from "firebase/firestore";

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "AIzaSyDSv2HCSQKCklKrcQm1DHjz-geFFG9S7bs",
  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || "tycoon-clicker-ca2ac"}.firebaseapp.com`,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "tycoon-clicker-ca2ac",
  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || "tycoon-clicker-ca2ac"}.appspot.com`,
  appId: import.meta.env.VITE_FIREBASE_APP_ID || "1:809250963923:web:1fad78ae66acec410b6f26",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let app: any = null;
let auth: any = null;
let db: any = null;

export const initializeFirebase = () => {
  if (!app) {
    if (!getApps().length) {
      app = initializeApp(firebaseConfig);
    } else {
      app = getApp();
    }
    auth = getAuth(app);
    db = getFirestore(app);
    console.log('üî• Firebase app initialized successfully');
  }
  return true;
};

export const getFirebaseAuth = () => {
  if (!auth) initializeFirebase();
  return auth;
};
export const getFirebaseApp = () => {
  if (!app) initializeFirebase();
  return app;
};

// Google –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const signInWithGoogle = async () => {
  initializeFirebase();
  const auth = getFirebaseAuth();
  if (!auth) {
    console.warn('‚ùå Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return null;
  }
  try {
    const provider = new GoogleAuthProvider();
    provider.addScope('email');
    provider.addScope('profile');
    await signInWithRedirect(auth, provider);
  } catch (error) {
    console.error('‚ùå –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:', error);
    throw error;
  }
};

// Email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const signInWithEmail = async (email: string, password: string) => {
  initializeFirebase();
  const auth = getFirebaseAuth();
  if (!auth) return null;
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return userCredential.user;
  } catch (error: any) {
    if (error.code === 'auth/user-not-found') {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      return userCredential.user;
    }
    throw error;
  }
};

// Apple –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (OAuth)
export const signInWithApple = async () => {
  initializeFirebase();
  const auth = getFirebaseAuth();
  if (!auth) return null;
  try {
    const provider = new OAuthProvider('apple.com');
    provider.addScope('email');
    provider.addScope('name');
    await signInWithRedirect(auth, provider);
  } catch (error) {
    throw error;
  }
};

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
export const signOutUser = async () => {
  if (!auth) return;
  
  try {
    await signOut(auth);
    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    throw error;
  }
};

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const onAuthStateChange = (callback: (user: any) => void) => {
  if (!auth) return () => {};
  
  return onAuthStateChanged(auth, (user) => {
    console.log('üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ:', user ? '–≤–æ—à–µ–ª' : '–≤—ã—à–µ–ª');
    callback(user);
  });
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const saveUserGameState = async (userId: string, gameState: any) => {
  if (!db) {
    console.warn('Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return false;
  }
  
  try {
    const userDocRef = doc(db, 'users', userId);
    await setDoc(userDocRef, {
      gameState,
      lastUpdated: new Date(),
      version: '1.0'
    }, { merge: true });
    
    console.log('üíæ –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase:', error);
    return false;
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loadUserGameState = async (userId: string) => {
  if (!db) {
    console.warn('Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return null;
  }
  
  try {
    const userDocRef = doc(db, 'users', userId);
    const docSnap = await getDoc(userDocRef);
    
    if (docSnap.exists()) {
      const data = docSnap.data();
      console.log('üì• –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Firebase');
      return data.gameState;
    } else {
      console.log('üìÑ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firebase:', error);
    return null;
  }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export const logGameEvent = async (userId: string, eventType: string, eventData: any) => {
  if (!db) return;
  
  try {
    await addDoc(collection(db, 'gameEvents'), {
      userId,
      eventType,
      eventData,
      timestamp: new Date()
    });
    
    console.log('üìä –°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ:', eventType);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è:', error);
  }
};

export { auth, db };